% Generate a dendrogram using a snapshot of the archive.
%
%   [z,selection] = dendrogram_archive(archive,snapShotNumber).
%   Where snapShotNumber is the number of the
%   snapShot (if only 1 snapShot is made, it's probably just 1). The values
%   used for the dendogram are scalled according: 
%   values = (data-refData)./refData and scaled with a logarithm.
%
%   Generated fields:
%   None
%
%   Outputs:
%   z           z matrix generated by the function linkage.m
%   selection   The Reaction or molecules used to construct the dendogram
%   
%   Required fields:
%   archive.set.snapShot
%   or archive.set.simulation.snapShot
%
%   Optional inputs:
%   'compare'       - Make a dendrogram using the average values of the 
%                     set ('average') or of individual simulations 
%                     ('individual').
%   'reference'     - Scale the values are skilled using a set
%                     ('average') or a simulation ('individual'). Default:
%                     'average'
%  'referenceNumber'- The number of the set or simulation which should
%                     be used as reference. (yeah, at the moment selecting 
%                     a simulation as reference is not straight forward if 
%                     it's not within the first strain). Default: 1
%   'selection'     - Tresshold value: "values" obtained after the scalling 
%                     should be greater than this value.
%   'include'       - Reactions or molecules to include (default 'all')
%   'set'           - Sets to include (default 'All')
%   'colortreshold' - The standard "colortreshold" option of the function
%                     dendrogram.m
%
%   Example:
%   z = dendrogram_archive(archive,1,'include','all',...
%       'compare','average','set',[1,2,3,4,5,10],'selection',1);

% Author: Rick Vink, rickvink@mit.edu h.w.vink@student.tudelft.nl
% Affilitation: Timothy Lu, MIT
% Last updated: 11/03/2016

function varargout = dendrogram_archive(varargin)

% -------- Process inputs -------- %

% Mandatory inputs
archive = varargin{1};
options.snap_shot = varargin{2};

% Optional inputs
options.compare = 'average'; % 'individual' or 'average'
options.reference = 'average'; % 'individual' or 'average'
options.include = 'all';    %  'all' or [number array]
options.referenceNumber = 1;    % Number
options.progress = 'On';
options.selection = 0;          % Number (removes reactions/molecules where the reference has a value lower than this value.
options.set = 'all';    %  'all' or [number array]
% options.colortreshold = 'default';

% Set default options
if nargin > 2
    inputOptions = struct(varargin{3:end});
    fieldNames = fieldnames(inputOptions);
    for i = 1:size(fieldNames,1)
        options.(fieldNames{i}) = inputOptions.(fieldNames{i});
    end
end

if strcmp(options.progress,'On')
   fprintf('Progress:\n     ');
end

% -------- Some initiation stuff -------- %

% Number of strains
tStrain = length(archive.set);

% Initiate matrixes
aveMatrix = [];
fullMatrix = [];

% Set which sets should be analysed
if ischar(options.set)
    if strcmp(options.set,'all')
        strainList = 1:tStrain;
    end
else
    if max(options.set) > 1 && length(options.set) < tStrain
        strainList = options.set;
    else
        sets = 1:tStrain;
        strainList = sets(options.set);
    end
end

% -------- Extract matrices -------- %

% Construct the matrixes that contain the average values of the strain and
% the matrix that contain the exact values of the simulations (this matrix
% might not be used depending on the options)

if strcmp(options.progress,'On')
   fprintf('Create matrix:\n     ');
   counter = 0;
end

% The specific reactions/molecules to include in the construction of the
% dendrogram
% Total number of reactions or molecules
tempMatrix = archive.set(1).snapShot(options.snap_shot).averageValues;
if ischar(options.include)
    if strcmp(options.include,'all')
        % Include all reaction/molecules
        include = ones(size(tempMatrix));
    end
else
    % Only include selected reactions/molecules
    include = options.include;
    if ~size(include) == size(tempMatrix)
        error('Dimensions of input ''reactions'' incorrect');
    end
end
% Keep track of the reactions/molecules used for the creation of
% the dendrogram
include = logical(include);
selection_checker = include;

aveMatrix = [];

% For every strain
for iStrain = strainList
    
    counter = counter + 1;
    
    if strcmp(options.progress,'On')
        display_progress(counter,length(strainList));
    end
    
    % Add the average data of the strain to matrix
    tempMatrix = archive.set(iStrain).snapShot(options.snap_shot).averageValues;
    % Remove variation of non selected reactions
    tempMatrix(~include) = 1;
    % Add the vector to the matrix that should hold the values of all sets
    aveMatrix(:,counter) = tempMatrix(1:end);
    
%     % Total number of simulations
%     tSimulation = length(archive.set(iStrain).simulation);
%     
%     % For every simulation
%     for iSimulation = 1:tSimulation
%         
%         % Add the data values of the specific simulation to the matrix
%         tempMatrix = archive.set(iStrain).simulation(iSimulation).snapShot(options.snap_shot).values;
%         % Remove non selected reactions
%         tempMatrix = tempMatrix(include);
%         fullMatrix(:,end+1) = tempMatrix(1:end);
%     
%     end
    
end

if strcmp(options.progress,'On')
    fprintf('Progressing:\n')
end

% -------- Set original data matrices -------- %

% Set the comparing data matrix
if strcmp(options.compare,'average')
    compareMatrix = aveMatrix;
elseif strcmp(options.compare,'individual')
    compareMatrix = fullMatrix;
end

% Set the reference data matrix
if strcmp(options.reference,'average')
    refMatrix = aveMatrix;
elseif strcmp(options.reference,'individual')
    refMatrix = fullMatrix;
end

% -------- Select specific entries of the matrices -------- %

% Make reference matrix
ref = refMatrix(:,options.referenceNumber);             % Select set/sim
refMat = repmat(ref,1,size(compareMatrix(:,:),2));      % Resize matrix

% Make comparing matrix
allMat = compareMatrix;                                 % Nothing special, left over step (not bothered to remove this)

% Remove values below tresshold
make_tresshold = abs(refMat) <= options.selection;       % Find out which values are below the tresshold. This step could be better optimized
make_tresshold = logical(make_tresshold);               % Lets make it boolean
refMat(make_tresshold) = 1;                             % Remove variation from reference matrix
allMat(make_tresshold) = 1;                             % Remove variation from all the other set/sim vectors
selection_checker((make_tresshold(:,1)~=1)) = 0;        % Update the select_checker

% -------- Scalling -------- %

% Compare values with reference
values = (allMat-refMat)./refMat;

% Rescale values
x = log(abs(values)+1).*((values>0)*2-1);

if strcmp(options.progress,'On')
    fprintf('Done\n')
end

% -------- Create dendrogram -------- %

if strcmp(options.progress,'On')
    fprintf('Create dendrogram:\n')
end
    
% Prepare dendrogram
x = x';
y = pdist(x);
% y2 = squareform(y);
z = linkage(y);

% Make dendrogram
if isfield(options,'colortreshold')
    D = dendrogram(z,0,'ColorThreshold',options.colortreshold);
else
    D = dendrogram(z,0);
end

% -------- Set outputs -------- %

varargout{1} = z;
varargout{2} = selection_checker;
varargout{3} = D;

if strcmp(options.progress,'On')
    fprintf('Done\n')
end

end